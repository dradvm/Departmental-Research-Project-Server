generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Answer {
  answerId      Int       @id @default(autoincrement())
  userId        Int?
  contentAnswer String?   @db.Text
  questionId    Int?
  Question      Question? @relation(fields: [questionId], references: [questionId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Answer_Question")
  User          User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Answer_User")

  @@index([userId], map: "fk_Answer_User")
  @@index([questionId], map: "fk_Answer_Question")
}

model Cart {
  userId   Int
  courseId Int
  Course   Course @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Cart_Course")
  User     User   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Cart_User")

  @@id([userId, courseId])
  @@index([courseId], map: "fk_Cart_Course")
}

model Category {
  categoryId     Int              @id @default(autoincrement())
  nameCategory   String?          @db.VarChar(255)
  CourseCategory CourseCategory[]
}

model Certificate {
  courseId        Int               @id
  certificate     String?           @db.Text
  Course          Course            @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Certificate_Course")
  UserCertificate UserCertificate[]
}

model Coupon {
  couponId         Int            @id @default(autoincrement())
  type             String?        @db.VarChar(100)
  value            Decimal?       @db.Decimal(10, 2)
  startDate        DateTime?      @db.Date
  endDate          DateTime?      @db.Date
  quantity         Int?
  appliedAmount    Int?
  minRequire       Decimal?       @db.Decimal(10, 2)
  maxValueDiscount Decimal?       @db.Decimal(10, 2)
  code             String?        @db.VarChar(100)
  userId           Int?
  User             User?          @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Coupon_User")
  CouponCourse     CouponCourse[]
  UserCoupon       UserCoupon[]

  @@index([userId], map: "fk_Coupon_User")
}

model CouponCourse {
  couponId Int
  courseId Int
  Coupon   Coupon @relation(fields: [couponId], references: [couponId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CouponCourse_Coupon")
  Course   Course @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CouponCourse_Course")

  @@id([couponId, courseId])
  @@index([courseId], map: "fk_CouponCourse_Course")
}

model Course {
  courseId        Int               @id @default(autoincrement())
  userId          Int?
  title           String?           @db.VarChar(255)
  subTitle        String?           @db.VarChar(255)
  description     String?           @db.Text
  price           Decimal?          @db.Decimal(10, 2)
  isPublic        Boolean?
  isAccepted      Boolean?
  thumbnail       String?           @db.Text
  requirement     String?           @db.Text
  targetAudience  String?           @db.Text
  Cart            Cart[]
  Certificate     Certificate?
  CouponCourse    CouponCourse[]
  User            User?             @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Course_User")
  CourseCategory  CourseCategory[]
  CourseObjective CourseObjective[]
  Enrollment      Enrollment[]
  PaymentDetail   PaymentDetail[]
  Review          Review[]
  Section         Section[]
  StudyRemind     StudyRemind[]
  Wishlist        Wishlist[]

  @@index([userId], map: "fk_Course_User")
}

model CourseCategory {
  courseId   Int
  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CourseCategory_Category")
  Course     Course   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CourseCategory_Course")

  @@id([courseId, categoryId])
  @@index([categoryId], map: "fk_CourseCategory_Category")
}

model CourseObjective {
  courseId          Int
  courseObjectiveId Int
  content           String? @db.Text
  Course            Course  @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CourseObjective_Course")

  @@id([courseId, courseObjectiveId])
}

model Enrollment {
  userId       Int
  courseId     Int
  dateRegister DateTime? @db.Date
  finishStatus Boolean?
  progress     Decimal?  @db.Decimal(5, 2)
  Course       Course    @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Enrollment_Course")
  User         User      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Enrollment_User")

  @@id([userId, courseId])
  @@index([courseId], map: "fk_Enrollment_Course")
}

model Follow {
  followerId                    Int
  followingId                   Int
  User_Follow_followerIdToUser  User @relation("Follow_followerIdToUser", fields: [followerId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Follow_Follower")
  User_Follow_followingIdToUser User @relation("Follow_followingIdToUser", fields: [followingId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Follow_Following")

  @@id([followerId, followingId])
  @@index([followingId], map: "fk_Follow_Following")
}

model Lecture {
  lectureId   Int        @id @default(autoincrement())
  sectionId   Int?
  nameLecture String?    @db.VarChar(255)
  isDone      Boolean?
  video       String     @db.Text
  order       Int        @default(1)
  Section     Section?   @relation(fields: [sectionId], references: [sectionId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Lecture_Section")
  Note        Note[]
  Question    Question[]

  @@index([sectionId], map: "fk_Lecture_Section")
}

model Message {
  messageId                         Int       @id @default(autoincrement())
  userSenderId                      Int?
  userReceiverId                    Int?
  message                           String?   @db.Text
  timeSend                          DateTime? @db.DateTime(0)
  User_Message_userReceiverIdToUser User?     @relation("Message_userReceiverIdToUser", fields: [userReceiverId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Message_UserReceiver")
  User_Message_userSenderIdToUser   User?     @relation("Message_userSenderIdToUser", fields: [userSenderId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Message_UserSender")

  @@index([userReceiverId], map: "fk_Message_UserReceiver")
  @@index([userSenderId], map: "fk_Message_UserSender")
}

model Note {
  noteId    Int       @id @default(autoincrement())
  timeNote  DateTime? @db.DateTime(0)
  note      String?   @db.Text
  userId    Int?
  lectureId Int?
  Lecture   Lecture?  @relation(fields: [lectureId], references: [lectureId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Note_Lecture")
  User      User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Note_User")

  @@index([lectureId], map: "fk_Note_Lecture")
  @@index([userId], map: "fk_Note_User")
}

model Notification {
  notificationId       Int                    @id @default(autoincrement())
  contentNotification  String?                @db.Text
  userId               Int?
  User                 User?                  @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Notification_User")
  NotificationReceiver NotificationReceiver[]

  @@index([userId], map: "fk_Notification_User")
}

model NotificationReceiver {
  notificationId      Int
  userId              Int
  timeGetNotification DateTime?    @db.DateTime(0)
  Notification        Notification @relation(fields: [notificationId], references: [notificationId], onDelete: NoAction, onUpdate: NoAction, map: "fk_NotificationReceiver_Notification")
  User                User         @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_NotificationReceiver_User")

  @@id([notificationId, userId])
  @@index([userId], map: "fk_NotificationReceiver_User")
}

model Payment {
  paymentId     Int             @id @default(autoincrement())
  timePayment   DateTime?       @db.DateTime(0)
  totalPrice    Decimal?        @db.Decimal(10, 2)
  userId        Int?
  User          User?           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Payment_User")
  PaymentDetail PaymentDetail[]

  @@index([userId], map: "fk_Payment_User")
}

model PaymentDetail {
  paymentId Int
  courseId  Int
  price     Decimal? @db.Decimal(10, 2)
  Course    Course   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentDetail_Course")
  Payment   Payment  @relation(fields: [paymentId], references: [paymentId], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentDetail_Payment")

  @@id([paymentId, courseId])
  @@index([courseId], map: "fk_PaymentDetail_Course")
}

model Question {
  questionId      Int      @id @default(autoincrement())
  userId          Int?
  lectureId       Int?
  contentQuestion String?  @db.Text
  Answer          Answer[]
  Lecture         Lecture? @relation(fields: [lectureId], references: [lectureId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Question_Lecture")

  @@index([lectureId], map: "fk_Question_Lecture")
}

model Report {
  reportId      Int     @id @default(autoincrement())
  userId        Int?
  contentReport String? @db.Text
  User          User?   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Report_User")

  @@index([userId], map: "fk_Report_User")
}

model Review {
  reviewId Int     @id @default(autoincrement())
  userId   Int?
  courseId Int?
  rating   Int?
  review   String? @db.Text
  Course   Course? @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review_Course")
  User     User?   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review_User")

  @@index([courseId], map: "fk_Review_Course")
  @@index([userId], map: "fk_Review_User")
}

model Section {
  sectionId   Int       @id @default(autoincrement())
  courseId    Int?
  nameSection String?   @db.VarChar(255)
  order       Int       @default(1)
  Lecture     Lecture[]
  Course      Course?   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Section_Course")

  @@index([courseId], map: "fk_Section_Course")
}

model StudyRemind {
  studyRemindId Int       @id @default(autoincrement())
  userId        Int?
  courseId      Int?
  timeRemind    DateTime? @db.DateTime(0)
  typeRemind    String?   @db.VarChar(100)
  Course        Course?   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_StudyRemind_Course")
  User          User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_StudyRemind_User")

  @@index([courseId], map: "fk_StudyRemind_Course")
  @@index([userId], map: "fk_StudyRemind_User")
}

model User {
  userId                               Int                    @id @default(autoincrement())
  name                                 String?                @db.VarChar(255)
  biography                            String?                @db.Text
  role                                 String?                @default("USERS") @db.VarChar(100)
  gender                               String?                @db.VarChar(10)
  codeExpired                          DateTime?              @db.DateTime(0)
  codeId                               String?                @db.VarChar(255)
  email                                String?                @unique(map: "email") @db.VarChar(255)
  password                             String?                @db.VarChar(255)
  img                                  String?                @db.VarChar(255)
  isActive                             Boolean?               @default(false)
  createdAt                            DateTime               @default(now()) @db.DateTime(0)
  updatedAt                            DateTime               @default(now()) @db.DateTime(0)
  isDeleted                            Boolean?               @default(false)
  Answer                               Answer[]
  Cart                                 Cart[]
  Coupon                               Coupon[]
  Course                               Course[]
  Enrollment                           Enrollment[]
  Follow_Follow_followerIdToUser       Follow[]               @relation("Follow_followerIdToUser")
  Follow_Follow_followingIdToUser      Follow[]               @relation("Follow_followingIdToUser")
  Message_Message_userReceiverIdToUser Message[]              @relation("Message_userReceiverIdToUser")
  Message_Message_userSenderIdToUser   Message[]              @relation("Message_userSenderIdToUser")
  Note                                 Note[]
  Notification                         Notification[]
  NotificationReceiver                 NotificationReceiver[]
  Payment                              Payment[]
  Report                               Report[]
  Review                               Review[]
  StudyRemind                          StudyRemind[]
  UserCertificate                      UserCertificate[]
  UserCoupon                           UserCoupon[]
  Wishlist                             Wishlist[]
}

model UserCertificate {
  courseId    Int
  userId      Int
  Certificate Certificate @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserCertificate_Certificate")
  User        User        @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserCertificate_User")

  @@id([courseId, userId])
  @@index([userId], map: "fk_UserCertificate_User")
}

model UserCoupon {
  userId   Int
  couponId Int
  Coupon   Coupon @relation(fields: [couponId], references: [couponId], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserCoupon_Coupon")
  User     User   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserCoupon_User")

  @@id([userId, couponId])
  @@index([couponId], map: "fk_UserCoupon_Coupon")
}

model Wishlist {
  userId   Int
  courseId Int
  Course   Course @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Wishlist_Course")
  User     User   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Wishlist_User")

  @@id([userId, courseId])
  @@index([courseId], map: "fk_Wishlist_Course")
}
