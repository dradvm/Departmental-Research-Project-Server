generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Answer {
  answerId      Int           @id @default(autoincrement())
  userId        Int?
  questionId    Int?
  createdAt     DateTime?     @default(now()) @db.DateTime(0)
  updatedAt     DateTime?     @default(now()) @db.DateTime(0)
  answerContent String?       @db.Text
  Question      Question?     @relation(fields: [questionId], references: [questionId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Answer_Question")
  User          User?         @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Answer_User")
  AnswerImage   AnswerImage[]

  @@index([userId], map: "fk_Answer_User")
  @@index([questionId], map: "fk_Answer_Question")
}

model Cart {
  userId   Int
  courseId Int
  Course   Course @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Cart_Course")
  User     User   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Cart_User")

  @@id([userId, courseId])
  @@index([courseId], map: "fk_Cart_Course")
}

model Category {
  categoryId     Int              @id @default(autoincrement())
  categoryName   String?          @db.Text
  CourseCategory CourseCategory[]
}

model Coupon {
  couponId         Int             @id @default(autoincrement())
  type             String          @db.VarChar(100)
  value            Decimal         @db.Decimal(10, 2)
  startDate        DateTime        @db.DateTime(0)
  endDate          DateTime        @db.DateTime(0)
  quantity         Int
  appliedAmount    Int
  minRequire       Decimal         @db.Decimal(10, 2)
  maxValueDiscount Decimal         @db.Decimal(10, 2)
  code             String          @db.VarChar(100)
  userId           Int?
  isGlobal         Boolean         @default(false)
  User             User?           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Coupon_User")
  CouponCourse     CouponCourse[]
  Payment          Payment[]
  PaymentDetail    PaymentDetail[]

  @@index([userId], map: "fk_Coupon_User")
}

model CouponCourse {
  couponId   Int
  courseId   Int
  isAccepted Boolean @default(false)
  isDeleted  Boolean @default(false)
  Coupon     Coupon  @relation(fields: [couponId], references: [couponId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CouponCourse_Coupon")
  Course     Course  @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CouponCourse_Course")

  @@id([couponId, courseId])
  @@index([courseId], map: "fk_CouponCourse_Course")
}

model Course {
  courseId         Int                @id @default(autoincrement())
  userId           Int?
  title            String?            @db.VarChar(255)
  subTitle         String?            @db.VarChar(255)
  description      String?            @db.Text
  price            Decimal            @db.Decimal(10, 2)
  isPublic         Boolean?
  isAccepted       Boolean?           @default(false)
  thumbnail        String?            @db.Text
  requirement      String?            @db.Text
  targetAudience   String?            @db.Text
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  updatedAt        DateTime           @default(now()) @db.DateTime(0)
  Cart             Cart[]
  CouponCourse     CouponCourse[]
  User             User?              @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Course_User")
  CourseCategory   CourseCategory[]
  Enrollment       Enrollment[]
  LastLectureStudy LastLectureStudy[]
  PaymentDetail    PaymentDetail[]
  Review           Review[]
  Section          Section[]
  Wishlist         Wishlist[]

  @@index([userId], map: "fk_Course_User")
}

model CourseCategory {
  courseId   Int
  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [categoryId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CourseCategory_Category")
  Course     Course   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_CourseCategory_Course")

  @@id([courseId, categoryId])
  @@index([categoryId], map: "fk_CourseCategory_Category")
}

model Enrollment {
  userId         Int
  courseId       Int
  enrolledAt     DateTime? @default(now()) @db.DateTime(0)
  lastAccessedAt DateTime? @db.DateTime(0)
  Course         Course    @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Enrollment_Course")
  User           User      @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Enrollment_User")

  @@id([userId, courseId])
  @@index([courseId], map: "fk_Enrollment_Course")
}

model Lecture {
  lectureId        Int                @id @default(autoincrement())
  sectionId        Int?
  nameLecture      String?            @db.VarChar(255)
  video            String             @db.Text
  order            Int                @default(1)
  time             Int                @default(0)
  LastLectureStudy LastLectureStudy[]
  Section          Section?           @relation(fields: [sectionId], references: [sectionId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Lecture_Section")
  Note             Note[]
  Question         Question[]
  StudyProgress    StudyProgress[]

  @@index([sectionId], map: "fk_Lecture_Section")
}

model Message {
  messageId                         Int       @id @default(autoincrement())
  userSenderId                      Int?
  userReceiverId                    Int?
  message                           String?   @db.Text
  timeSend                          DateTime? @default(now()) @db.DateTime(0)
  seenAt                            DateTime? @db.DateTime(0)
  User_Message_userReceiverIdToUser User?     @relation("Message_userReceiverIdToUser", fields: [userReceiverId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Message_UserReceiver")
  User_Message_userSenderIdToUser   User?     @relation("Message_userSenderIdToUser", fields: [userSenderId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Message_UserSender")

  @@index([userReceiverId], map: "fk_Message_UserReceiver")
  @@index([userSenderId], map: "fk_Message_UserSender")
}

model Note {
  noteId    Int       @id @default(autoincrement())
  timeNote  Int?
  note      String?   @db.Text
  userId    Int?
  lectureId Int?
  createdAt DateTime? @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  Lecture   Lecture?  @relation(fields: [lectureId], references: [lectureId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Note_Lecture")
  User      User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Note_User")

  @@index([lectureId], map: "fk_Note_Lecture")
  @@index([userId], map: "fk_Note_User")
}

model Payment {
  paymentId     Int             @id @default(autoincrement())
  timePayment   DateTime        @db.DateTime(0)
  userId        Int
  couponId      Int?
  final_price   Decimal         @default(0.00) @db.Decimal(10, 2)
  User          User            @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Payment_User")
  Coupon        Coupon?         @relation(fields: [couponId], references: [couponId], onDelete: NoAction, onUpdate: NoAction, map: "fk_payment_coupon")
  PaymentDetail PaymentDetail[]

  @@index([userId], map: "fk_Payment_User")
  @@index([couponId], map: "fk_payment_coupon")
}

model PaymentDetail {
  paymentId   Int
  courseId    Int
  price       Decimal @db.Decimal(10, 2)
  couponId    Int?
  final_price Decimal @default(0.00) @db.Decimal(10, 2)
  Course      Course  @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentDetail_Course")
  Payment     Payment @relation(fields: [paymentId], references: [paymentId], onDelete: NoAction, onUpdate: NoAction, map: "fk_PaymentDetail_Payment")
  Coupon      Coupon? @relation(fields: [couponId], references: [couponId], onDelete: NoAction, onUpdate: NoAction, map: "fk_paymentdetail_coupon")

  @@id([paymentId, courseId])
  @@index([courseId], map: "fk_PaymentDetail_Course")
  @@index([couponId], map: "fk_paymentdetail_coupon")
}

model Question {
  questionId      Int             @id @default(autoincrement())
  userId          Int?
  lectureId       Int?
  createdAt       DateTime?       @default(now()) @db.DateTime(0)
  updatedAt       DateTime?       @default(now()) @db.DateTime(0)
  questionTitle   String          @db.Text
  questionContent String?         @db.Text
  Answer          Answer[]
  Lecture         Lecture?        @relation(fields: [lectureId], references: [lectureId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Question_Lecture")
  User            User?           @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Question_User")
  QuestionImage   QuestionImage[]

  @@index([lectureId], map: "fk_Question_Lecture")
  @@index([userId], map: "fk_Question_User")
}

model Review {
  reviewId  Int       @id @default(autoincrement())
  userId    Int?
  courseId  Int?
  rating    Int?
  review    String?   @db.Text
  createdAt DateTime? @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  Course    Course?   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review_Course")
  User      User?     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review_User")

  @@index([courseId], map: "fk_Review_Course")
  @@index([userId], map: "fk_Review_User")
}

model Section {
  sectionId   Int       @id @default(autoincrement())
  courseId    Int?
  nameSection String?   @db.VarChar(255)
  order       Int       @default(1)
  Lecture     Lecture[]
  Course      Course?   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Section_Course")

  @@index([courseId], map: "fk_Section_Course")
}

model StudyRemind {
  studyRemindId  Int                   @id @default(autoincrement())
  userId         Int
  googleEventId  String                @db.VarChar(255)
  summary        String                @db.VarChar(255)
  description    String?               @db.Text
  time           DateTime              @db.DateTime(0)
  frequency      StudyRemind_frequency
  daysOfWeek     String?               @db.VarChar(20)
  recurrenceRule String?               @db.VarChar(255)
  createdAt      DateTime?             @default(now()) @db.DateTime(0)
  updatedAt      DateTime?             @default(now()) @db.DateTime(0)
  User           User                  @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_StudyRemind_User")

  @@index([userId], map: "FK_StudyRemind_User")
}

model User {
  userId                               Int                @id @default(autoincrement())
  name                                 String?            @db.VarChar(255)
  biography                            String?            @db.Text
  role                                 String?            @default("USERS") @db.VarChar(100)
  gender                               String?            @db.VarChar(10)
  codeExpired                          DateTime?          @db.DateTime(0)
  codeId                               String?            @db.VarChar(255)
  email                                String?            @unique(map: "email") @db.VarChar(255)
  password                             String?            @db.VarChar(255)
  img                                  String?            @db.Text
  isActive                             Boolean?           @default(false)
  createdAt                            DateTime           @default(now()) @db.DateTime(0)
  updatedAt                            DateTime           @default(now()) @db.DateTime(0)
  isDeleted                            Boolean?           @default(false)
  imgPublicId                          String?            @db.VarChar(255)
  Answer                               Answer[]
  Cart                                 Cart[]
  Coupon                               Coupon[]
  Course                               Course[]
  Enrollment                           Enrollment[]
  LastLectureStudy                     LastLectureStudy[]
  Message_Message_userReceiverIdToUser Message[]          @relation("Message_userReceiverIdToUser")
  Message_Message_userSenderIdToUser   Message[]          @relation("Message_userSenderIdToUser")
  Note                                 Note[]
  Payment                              Payment[]
  Question                             Question[]
  Review                               Review[]
  StudyProgress                        StudyProgress[]
  StudyRemind                          StudyRemind[]
  Wishlist                             Wishlist[]
}

model Wishlist {
  userId   Int
  courseId Int
  Course   Course @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Wishlist_Course")
  User     User   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_Wishlist_User")

  @@id([userId, courseId])
  @@index([courseId], map: "fk_Wishlist_Course")
}

model StudyProgress {
  userId      Int
  lectureId   Int
  isDone      Boolean? @default(false)
  currentTime Int?     @default(0)
  Lecture     Lecture  @relation(fields: [lectureId], references: [lectureId], onDelete: NoAction, onUpdate: NoAction, map: "fk_StudyProgress_Lecture")
  User        User     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_StudyProgress_User")

  @@id([userId, lectureId])
  @@index([lectureId], map: "fk_StudyProgress_Lecture")
}

model LastLectureStudy {
  userId    Int
  courseId  Int
  lectureId Int?
  Course    Course   @relation(fields: [courseId], references: [courseId], onDelete: NoAction, onUpdate: NoAction, map: "fk_LastLectureStudy_Course")
  Lecture   Lecture? @relation(fields: [lectureId], references: [lectureId], onDelete: NoAction, onUpdate: NoAction, map: "fk_LastLectureStudy_Lecture")
  User      User     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "fk_LastLectureStudy_User")

  @@id([userId, courseId])
  @@index([lectureId], map: "fk_LastLectureStudy_Lecture")
  @@index([courseId], map: "fk_LastLectureStudy_Course")
}

model AnswerImage {
  answerId  Int
  publicId  String @unique(map: "publicId") @db.VarChar(190)
  secureUrl String @db.Text
  Answer    Answer @relation(fields: [answerId], references: [answerId], onDelete: NoAction, onUpdate: NoAction, map: "AnswerImage_ibfk_1")

  @@id([answerId, publicId])
}

model QuestionImage {
  questionId Int
  publicId   String   @unique(map: "publicId") @db.VarChar(190)
  secureUrl  String   @db.Text
  Question   Question @relation(fields: [questionId], references: [questionId], onDelete: NoAction, onUpdate: NoAction, map: "QuestionImage_ibfk_1")

  @@id([questionId, publicId])
}

enum StudyRemind_frequency {
  onetime
  daily
  weekly
}
